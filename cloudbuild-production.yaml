steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-app-builder'
    args:
      - 'pull'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-build-stage-cache'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-app'
    args:
      - 'pull'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-latest'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-db'
    args:
      - 'pull'
      - 'us.gcr.io/${PROJECT_ID}/mongodb:${_STATE}-latest'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-app-builder'
    args:
      - 'build'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-build-stage-cache'
      - '--target'
      - 'builder'
      - '--cache-from'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-build-stage-cache'
      - '--build-arg'
      - 'DIR_NAME=rust_api_server'
      - 'rust_api_server'
    waitFor: ['pull-app-builder', 'pull-app']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-app'
    args:
      - 'build'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-latest'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-$REVISION_ID'
      - '--cache-from'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-latest'
      - '--cache-from'
      - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-build-stage-cache'
      - '--build-arg'
      - 'DIR_NAME=rust_api_server'
      - 'rust_api_server'
    waitFor: ['build-app-builder']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-mongodb'
    args:
      - 'build'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/mongodb:${_STATE}-latest'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/mongodb:${_STATE}-$REVISION_ID'
      - '--cache-from'
      - 'us.gcr.io/${PROJECT_ID}/mongodb:${_STATE}-latest'
      - 'mongodb'
    waitFor: ['pull-db']

  # -------------- deploy ----------------
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-credentials'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'api-server-${_STATE}'
      - '--zone=${_ZONE}'
      - '--project=${PROJECT_ID}'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deploy-default'
    args:
      - 'apply'
      - '-f'
      - 'k8s/${_STATE}'
      - '--record'
    waitFor: ['build-app', 'build-mongodb', 'get-credentials']

  # - name: 'gcr.io/cloud-builders/kubectl'
  #   id: 'patch-default-deployment'
  #   args:
  #     - 'patch'
  #     - 'deployment'
  #     - 'api-server-deployment'
  #     - '-p'
  #     - '{"spec":{"template":{"spec":{"containers":[{"name": "api-server", "image": "us.gcr.io/$PROJECT_ID/rust_api_server:$BRANCH_NAME-$REVISION_ID"}]}}}}'
  #  waitFor: ['deploy-default', 'build-app']

  # production only
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'decrypt-deployment-production-loadbalancer'
    args:
      - 'kms'
      - 'decrypt'
      - '--location'
      - 'global'
      - '--keyring'
      - 'rust-api'
      - '--key'
      - 'kubernetes-deployment-key'
      - '--ciphertext-file'
      - 'k8s/production/loadbalancer.yaml.encode'
      - '--plaintext-file'
      - 'k8s/production/loadbalancer.yaml'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deployment-production-loadbalancer'
    args:
      - 'apply'
      - '-f'
      - 'k8s/production/loadbalancer.yaml'
      - '--record'
    waitFor: ['decrypt-deployment-production-loadbalancer', 'get-credentials']

timeout: 3600s
images:
  - 'us.gcr.io/${PROJECT_ID}/mongodb:${_STATE}-latest'
  - 'us.gcr.io/${PROJECT_ID}/mongodb:${_STATE}-$REVISION_ID'
  - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-latest'
  - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-$REVISION_ID'
  - 'us.gcr.io/${PROJECT_ID}/rust_api_server:${_STATE}-build-stage-cache'
# todo:
# pod -> deployment
